{
    "collab_server" : "",
    "contents" : "#' Find Function using Cubic Spline Interpolation\n#'\n#' This performs cubic spline interpolation over the cumulative\n#' sum of frequencies of a variable.\n#' @param x The variable to perform the spline over\n#' @param nbreaks The number of breaks for the cumulative sum of frequencies applied to x\n#' @param min The minimum value for the break sequence\n#' @param max The maximum value for the break sequence\n#' @return a cubic spline interpolation function of x\n#' @export\ncubic_spline <- function(x,nbreaks=10,min=0,max=100) {\n\n  duration = x\n  breaks = seq(min,max, by = nbreaks)\n  duration.cut = cut(duration,breaks, right = FALSE)\n  duration.freq = table(duration.cut)\n\n  duration.cumfreq = cumsum(duration.freq)\n  cumfreq0 = c(0,cumsum(duration.freq))\n\n  f_of_x = stats::splinefun(breaks,cumfreq0)\n\n  return(f_of_x)\n}\n\n\n#' Adjust the splines derivative\n#'\n#' This function adjusts the derivative of a cubic spline so that\n#' when plotted against another variable, the AUC is equal to 1\n#' @param x The variable to plot the derivative against\n#' @param deriv The derivative of the cubic spline\n#' @return the adjusted derivative\n#' @export\nspline_adjustment <- function(x,deriv) {\n  id <- order(x)\n  AUC <- sum(diff(x[id])*zoo::rollmean(deriv[id],2))\n  return(deriv/AUC)\n}\n",
    "created" : 1497546140956.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "510822205",
    "id" : "76FD6FC7",
    "lastKnownWriteTime" : 1497548577,
    "last_content_update" : 1497548577534,
    "path" : "~/Documents/r_projects/cubicsplines/R/utility_functions.R",
    "project_path" : "R/utility_functions.R",
    "properties" : {
        "tempName" : "Untitled1"
    },
    "relative_order" : 2,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}